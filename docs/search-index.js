var searchIndex = JSON.parse('{\
"tiralabra_calculator":{"doc":"","t":[0,5,0,0,0,0,0,3,11,11,11,11,11,11,11,5,11,11,11,12,13,13,13,13,4,13,13,13,13,13,4,13,13,13,13,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,5,5,5,5,5,5],"n":["logic","main","ui","calculator","enums","shunting_yard","tokenize","Calculator","borrow","borrow_mut","calculate_infix","eval_postfix","from","into","new","operate","try_from","try_into","type_id","variables","Cos","Div","Equals","Func","Function","Lparen","Minus","Mul","Number","Op","Operator","Plus","Pow","Rparen","Sin","Sqrt","Tan","Token","Variable","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","eq","evaluate","fmt","fmt","fmt","fmt","format","from","from","from","into","into","into","ne","ne","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0","0","0","precedence","shunting_yard","get_function","get_operator","tokenize","main_loop"],"q":["tiralabra_calculator","","","tiralabra_calculator::logic","","","","tiralabra_calculator::logic::calculator","","","","","","","","","","","","","tiralabra_calculator::logic::enums","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tiralabra_calculator::logic::enums::Operator","tiralabra_calculator::logic::enums::Token","","","tiralabra_calculator::logic::shunting_yard","","tiralabra_calculator::logic::tokenize","","","tiralabra_calculator::ui"],"d":["","","","","","","","Struct for keeping track of history and variables, and …","","","Enter a string with an infix expression (example: “2 * …","Calculates a postfix expression and returns a single …","","","","Operate on the argument values depending on the <code>c</code> …","","","","","","","","","","","","","","","","","","","","","","Token can represent either a <code>Number</code>, a <code>Float</code>, a <code>Variable</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the precedence value for given operator, as …","Performs Dijkstra’s Shunting yard algorithm to convert …","","Return true if <code>c</code> is one of the defined mathematical …","Tokenize a string into a <code>Vec</code> of Tokens.","The main REPL for the calculator. "],"i":[0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,2,3,3,3,0,3,3,3,4,4,0,3,3,3,2,2,2,0,4,4,3,2,4,3,2,3,2,3,2,4,3,2,2,4,3,3,2,2,4,3,2,4,3,2,4,3,3,2,3,4,3,2,4,3,2,4,3,2,5,6,7,8,0,0,0,0,0,0],"f":[null,[[]],null,null,null,null,null,null,[[]],[[]],[[["str",15]],["result",4,[["string",3],["string",3]]]],[[["vec",3,[["token",4]]]],["result",4,[["f64",15],["string",3]]]],[[]],[[]],[[],["calculator",3]],[[["f64",15],["f64",15],["operator",4]],["result",4,[["f64",15],["string",3]]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["operator",4]],[[],["function",4]],[[]],[[]],[[["token",4]],["bool",15]],[[["operator",4]],["bool",15]],[[["function",4]],["bool",15]],[[["f64",15]],["f64",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[["token",4]],["bool",15]],[[["operator",4]],["bool",15]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[["operator",4]],["option",4,[["u8",15]]]],[[["vec",3,[["token",4]]]],["result",4,[["vec",3,[["token",4]]],["string",3]]]],[[["str",15]],["option",4,[["function",4]]]],[[["char",15]],["option",4,[["operator",4]]]],[[["str",15]],["result",4,[["vec",3,[["token",4]]],["string",3]]]],[[],["result",4,[["error",3]]]]],"p":[[3,"Calculator"],[4,"Function"],[4,"Operator"],[4,"Token"],[13,"Func"],[13,"Number"],[13,"Op"],[13,"Variable"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};